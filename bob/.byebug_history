continue
(remark.eql?(remark.upcase) && remark.start_with?('W'))
next
remark.eql?(remark.upcase) && remark.start_with?('W')
remark
continue
remark.end_with?('?')  === true
remark.end_with?('?') 
remark
next
remark.include?('\n') || remark.include?('\t') || remark.eql?('')
remark.end_with?('?')
remark
continue
remark.include?('\n') || remark.include?('\t')
remark.end_with?('?')
remark.strip
remark.trim
remark
continue
remark
continue
remark.include?('\n') || remark.include?('\t')
remark.end_with?('?')
remark
continue
remark.include?('\n') || remark.include?('\t')
remark.end_with?('?')
remark
continue
remark.include?('\n') || remark.include?('\t')
remark.end_with?('?')
remark.strip
remark = "Tom-ay-to, tom-aaaah-to."
remark.strip
remark.trim()
remark = "Okay if like my  spacebar  quite a bit?   "
remark
continue
remark
continue
remark
remark.end_with?('?')
continue
remark.include?('\n') || remark.include?('\t')
remark.end_with?('?')
remark
continue
remark
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
remark.include?('\n') || remark.include?('\t')
continue
remark
continue
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
continue
remark
continue
remark
continue
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
continue
remark.end_with?('?')
remark
continue
remark
continue
making_a_big_deal?(remark)
making_a_big_deal?(remark) && dumb_question?(remark)
remark
continue
remark
continue
remark
remark = remark.gsub(/[A-Z]/,'').gsub('!','')
remark.gsub(/[A-Z]/,'').gsub('!','')
remark.gsub(/[A-Z]/,'')
remark
continue
remark.include? ('?')
remark.upcase.eql?(remark) && remark.end_with?('?')
remark.upcase.eql?(remark) && remark.end_with?('.', '!')
remark.upcase.eql?(remark) && remark.include?('!')
remark
continue
('0'..'9').include?(remark.chars.first) && (remark = remark.gsub(/[A-Za-z]/,'').gsub('!', '')) && true
continue
if ('0'..'9').include?(remark.chars.first) && (remark = remark.gsub(/[A-Za-z]/,'').gsub('!', ''))
('0'..'9').include?(remark.chars.first) && (remark = remark.gsub(/[A-Za-z]/,'').gsub('!', ''))
continue
remark
continue
remark.upcase.eql?(remark) && remark.include?('!')
remark = remark.gsub('!','')
remark.upcase.eql?(remark) && remark.include?('!')
remark.gsub('!','')
remark
continue
remark
continue
(('0'..'9').include?(remark.chars.first) && (remark = remark.gsub(/[A-Za-z]/,'')) && remark.end_with?('!') || (remark.match?(/[A-Z]/) && remark.include?('!')))
remark.match?(/[A-Z]/) && remark.end_with?('?')
remark.start_with?(/[A-Z]/) && remark.end_with?('.', '!')
remark.end_with?('.','!')
remark.end_with?('.')
remark.start_with?(/[A-Z]/)
remark
continue
remark
continue
('0'..'9').include?(remark.chars.first) && remark = remark.gsub(/[A-Za-z]/,'') && remark.end_with?('!')
('0'..'9').include?(remark.chars.first) && remark = remark.gsub(/[A-Za-z]/,'') && remark.end_with('!')
('0'..'9').include?(remark.chars.first) && remark = remark.gsub(/[A-Za-z]/,'')
continue
remark = remark.gsub(/[A-Za-z]/,'')
remark = remark.gsub(/[\d+]/,'')
('0'..'9').include?(remark.chars.first)
if ('0'..'9').include?(remark.chars.first) && remark = remark.gsub(/[\d+]/,'')
continue
remark
continue
remark.chars.any? { |char| ('a'..'z').include? char.downcase }
remark
continue
remark.chars.any? { |char| ('a'..'z').include? char.downcase }
{ |char| ('a'..'z').include? char.downcase }
remark.chars.any?
remark
continue
remark
remark.match?([A-Z])
remark.match?(/[A-Z]/)
continue
Float(char)
Float(char) !
char
continue
remark.scan(/[A-Z]/)
!remark.scan(/[A-Z]/).empty?
!remark.scan(/\d+/).empty?
remark.scan(/\d+/).empty?
remark.scan(/\d+/)
remark
remark.scan(/\d+/).empty?
continue
[A-Z]
remark.match?(/[A-Z]/)
remark
continue
(remark.match?(/[A-Z]/) || !remark.scan(/\d+/).empty?) && remark.include?('!')
remark.match?(/[A-Z]/)
continue
numeric?(remark.chars.first)
continue
remark.chars.first.numeric?
continue
remark.chars.first.numeric?
remark.chars.first
remark.chars
continue
remark.chars.first.numeric?
remark.chars.first
remark.chars
remark.chars.first.numeric?
remark.chars.numeric?
remark.numeric?
remark.chars.first.numeric?
remark.chars.first
remark.chars
remark
continue
'yes' if remark.include?('!') || remark.match?(/[A-Z]/)
if remark.include?('!') || remark.match?(/[A-Z]/) puts 'yes' end
if remark.include?('!') || remark.match?(/[A-Z]/)
if (remark.include?('!') || remark.match?(/[A-Z]/)) do puts 'fhjkwe' end
if (remark.include?('!') || remark.match?(/[A-Z]/)) puts 'fhjkwe' end
remark.include?('!') || remark.match?(/[A-Z]/)
remark.include?('!')
remark
continue
%Q{Bob hears \"#{remark}\"} unless remark.match?(/[A-Z]/)
%Q{Bob hears \"#{remark}\", and ..} if remark.match?(/[A-Z]/)
remark.match?(/[A-Z]/)
