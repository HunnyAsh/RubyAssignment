continue
212.modulo(24)
212 % 24
5100/ 24
5100 /60
85 * 60 % 60
85 * 60
@minutes
appropriate_hours_minutes
@minutes
continue
time
continue
@minutes
@hour
continue
@hour
continue
@hour
continue
@hour
continue
@hour
continue
@minutes
@hour
continue
"#{@hour}:#{@minutes}"
"#{@hour}:{@minutes}"
@minutes = format('%02d', @minutes)
@minutes = self.minutes.to_i + clock.minutes.to_i
@hour
continue
@minutes
@hour
continue
@hour
continue
@minutes
@hour
continue
@hour
@minutes = self.minutes.to_i + clock.minutes.to_i
continue
@minutes = self.minutes.to_i + clock.minutes.to_i
self.minutes.to_i + clock.minutes.to_i
clock
continue
self.minutes.to_i + clock.minutes.to_i
clock.minutes
continue
minutes.minutes.to_i
minutes.minutes
minutes
@minutes
self.minutes.to_i
self.minutes.to_i + @minutes
self.minutes
self
continue
@minutes
self.class.minutes
self.class.minute
self.class.minutes
self.class
minutes
continue
@hour
@hour = @hour.zero? && time[:hour] ? time[:hour].modulo(24) :  @hour.modulo(24)
@hour, @minutes = time[:hour] || time[:minute] ? @minutes.divmod(60) : [0, 0]
@minutes.divmod(60)
time[:hour] || time[:minute]
@minutes, s = time[:minute] ? total_seconds.divmod(60) : [0, 0]
total_seconds
continue
@minutes = format('%02d', @minutes)
@hour = format('%02d', @hour)
@hour
continue
format_hour_min
@hour = @hour.zero? ? time[:hour].modulo(24) :  @hour.modulo(24)
@hour, @minutes = time[:hour] || time[:minute] ? @minutes.divmod(60) : [0, 0]
@minutes, s = time[:minute] ? total_seconds.divmod(60) : [0, 0]
time
@minutes
continue
@hour = @hour.zero? ? time[:hour].modulo(24) :  @hour.modulo(24)
@minutes.divmod(60)
time[:hour]
time[:minute]
@hour, @minutes = time[:hour] ||time[:minute] ? @minutes.divmod(60) : [0, 0]
@
a
@minutes
@minutes, s
continue
time
continue
@hour, @minutes = time[:hour] && time[:minute] ? @minutes.divmod(60) : [0, 0]
time[:hour] && time[:minute] 
@minutes, s = time[:minute] ? total_seconds.divmod(60) : [0, 0]
time[:minute] ? total_seconds.divmod(60) : [0, 0]
160 *60
time
total_seconds
continue
@hour = @hour.zero? ? time[:hour].modulo(24) :  @hour.modulo(24)
@hour, @minutes = time[:hour] && time[:minute] ? @minutes.divmod(60) : [0, 0]
@minutes, s = time[:minute] ? total_seconds.divmod(60) : [0, 0]
time[:minute] ? total_seconds.divmod(60) : [0, 0]
total_seconds = 11 * 60 * 60 + 9 * 60
11 * 60 * 60 + 9 * 60
11 * 60 * 60
total_seconds.divmod(60)
1200 / 60 /60
1200 / 60
total_seconds
continue
format_hour_min
@hour = @hour.zero? ? time[:hour].modulo(24) :  @hour.modulo(24)
@hour, @minutes = time[:hour] && time[:minutes] ? @minutes.divmod(60) : [0, 0]
@
@minutes, s = time[:minutes] ? total_seconds.divmod(60) : [0, 0]
continue
@hour ? @hour.modulo(24) : time[:hour].modulo(24)
@hour
@hour, @minutes = time[:hour] && time[:minutes] ? @minutes.divmod(60) : [0, 0]
time[:hour] && time[:minutes] ? @minutes.divmod(60) : [0, 0]
time[:minutes] ? total_seconds.divmod(60) : [0, 0]
total_seconds
continue
@hour ? @hour.modulo(24) : time[:hour].modulo(24)
@hour
!time[:hour]
total_seconds
continue
time[:hour].modulo(24)
!time[:hour]
time
total_seconds
continue
@hour
    @hour = @hour.modulo(24)
@
@hour = @hour.modulo(24) if @hour > 24
@hour, @minutes = @minutes.divmod(60) if !time[:hour]
@minutes, s = total_seconds.divmod(60) if !time[:hour]
continue
total_seconds.divmod(60)
total_seconds
total_seonds
continue
@hour
hour
continue
time[:minute] && time[:minute] > 60 && time[:hour]
time
continue
time[:hour].modulo(24)
time[:minute] && time[:minute] > 60 && time[:hour]
time
continue
time[:hour].modulo(24)
time[:minute] && time[:minute] > 60 && time[:hour]
time
continue
time[:hour].modulo(24)
time[:minute] && time[:minute] > 60 && time[:hour]
time
continue
time[:hour].modulo(24)
time[:minute] && time[:minute] > 60 && time[:hour]
time
continue
time[:minute]
time[:minute] > 60
time
continue
time
continue
time
continue
time[:hour].modulo(24) + add_hours
time[:hour].modulo(60)
time[:minute] > 60 && time[:hour]
time[:minute] > 60
continue
check_add_hours
time[:hour].eql?(24)
continue
time[:hour]
time
continue
time
continue
time
continue
time
continue
time
continue
time[:hour] % 24 + add_hours
time[:hour] % 24
time[:hour]
hour
time[:minute] > 60 && time[:hour]
time[:minute] > 60 && time[:hour
time[:minute] > 60
time[:minute]
check_for_hour
time
continue
time
continue
time
continue
format('%02d', check_for_hour)
check_for_hour
@hour
time
continue
time
continue
time
continue
time
continue
time
continue
@min = format('%02d', check_for_min)
check_for_min
@hour
time
continue
time
continue
time
continue
time
continue
@hour
check_for_hour
check_for_min
check_for_min)
time
continue
time
continue
time
continue
time
continue
time[:minute] / 60
@hour
time
continue
